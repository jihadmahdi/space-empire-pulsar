package org.axan.sep.common.db;

import java.util.Set;

/**
 * A game event is something fired by user interaction or server.
 * On client side, game events are fired and processed on local gameboard, they are instance of {@link ICommand} interface.
 * Processing on local gameboard, a local executor is used (new events generated from a player view filtered DB, only fire to the same local player view filtered DB).
 * When the user call for "end of turn", the client send a list of events he fired within current turn as commands to the server.
 * On server side, for each player commands are processed on the global DB, where new generated events may fire on other players.
 * Player view are also maintained on server-side so players commands are also processed on player view, with local executor.
 * Then the server send to each player a list of game events fired on his view during the turn resolution. 
 * Each client must then process this events (with local executor) on local gameboard to be ready to play new turn. 
 */
public interface IGameEvent
{
	/**
	 * A game event executor is used by IGameEvent to generate sub events.
	 */
	public static interface IGameEventExecutor
	{
		void onGameEvent(IGameEvent event, Set<String> observers);
	}
	
	/**
	 * Exception thrown when error occurs during game event processing.
	 */
	public static class GameEventException extends Exception
	{
		private static final long	serialVersionUID	= 1L;

		private final IGameEvent event;
		
		public GameEventException(IGameEvent event, Throwable t)
		{
			super(t);
			this.event = event;
		}

		public GameEventException(IGameEvent event, String msg)
		{
			super(msg);
			this.event = event;
		}
		
		public IGameEvent getEvent()
		{
			return event;
		}
	}		
	
	/**
	 * Process events on the given SEP database.
	 * New events generated by the current one processing can be send to the give executor.
	 * @param db
	 * @return
	 * @throws SQLDataBaseException 
	 */
	void process(IGameEventExecutor executor, SEPCommonDB db) throws GameEventException;
}
